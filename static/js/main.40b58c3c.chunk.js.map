{"version":3,"sources":["ZomatoAPI.js","LocationDetails.js","MapNotLoaded.js","MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["headers","Accept","user-key","get","name","lat","lng","fetch","concat","method","then","res","json","data","restaurants","LocationDetails","react_default","a","createElement","className","this","props","locationData","cuisines","average_cost_for_two","currency","menu_url","href","featured_image","alt","src","width","height","font","Component","MapNotLoaded","state","show","timeout","showMessage","_this","setState","window","setTimeout","clearTimeout","MapContainer","map","showInfoWindow","activeMarker","activeMarkerProps","showDetails","selectedLocation","mapReady","onClickMarker","marker","e","onInfoWindowClose","showingInfoWindow","onListItemClick","location","_location$position","position","ZomatoAPI","response","error","restaurant","_this2","markers","_this$state","style","dist","role","aria-label","onReady","google","zoom","initialCenter","key","animation","maps","Animation","BOUNCE","DROP","address","url","onClick","visible","onClose","toggleMenu","type","placeholder","value","query","onChange","onUpdateQuery","target","onNewSearch","locations","src_LocationDetails","GoogleApiWrapper","apiKey","LoadingContainer","App","allLocations","onToggleMenu","updateQuery","trim","showingLocations","match","RegExp","escapeRegExp","filter","test","sort","sortBy","fa","src_MapContainer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.40b58c3c.chunk.js","sourcesContent":["const api = \"https://developers.zomato.com/api/v2.1/\"\n\nconst headers = {\n            'Accept': 'application/json',\n            'user-key': 'fb495d4740db3a18f7de8ca9f150933e'\n        }\n\nexport const get = (name, lat, lng) =>\n        fetch(`${api}search?q=${name}&count=1&lat=${lat}&lon=${lng}`, { \n            method: 'GET',\n            headers\n            }).then(res => res.json())\n            .then(data => data.restaurants)\n\n","import React, { Component } from 'react'\n\nclass LocationDetails extends Component {\n    render() {\n        return(\n            <div className=\"location-details\">\n            <h4>{this.props.locationData.name}</h4>\n            <p>Cuisine: {this.props.locationData.cuisines}</p>\n\n            {this.props.locationData.average_cost_for_two ? (\n                <p> Average Cost for two : {this.props.locationData.average_cost_for_two}{this.props.locationData.currency}</p>\n            ): \"\"}\n\n            {this.props.locationData.menu_url ? (\n                <a href={this.props.locationData.menu_url}> Checkout the Menu </a>\n            ): \"\"}\n            \n            {this.props.locationData.featured_image ? (\n                <div className=\"featured-image\">\n                 <img alt={this.props.locationData.name + 'food picture'}\n                      src={this.props.locationData.featured_image} width=\"100%\" height=\"150\" />\n                <p font=\"small\"> Image credit: Zomato</p>\n                     </div>\n                    ):  \"\"}\n           \n        </div>\n        )\n    }\n\n}\n\n\nexport default LocationDetails;","import React, { Component } from 'react';\n\nclass MapNotLoaded extends Component {\n    state = {\n        show: false,\n        timeout : null\n    }\n\n    componentDidMount() {\n        let timeout = window.setTimeout(this.showMessage, 1000);\n        this.setState({ timeout });\n    }\n\n    componentWillUnmount() {\n        window.clearTimeout(this.state.timeout);\n    }\n\n    showMessage = () => {\n        this.setState({ show: true });\n    }\n\n    render() {\n        return(\n            <div>\n                {this.state.show ? (\n                    <div>\n                    <h1>Error occured while loading the map</h1>\n                    <p>Map could not load, please check network connectivity</p>\n                    </div>\n                ): (<div>Loading...</div>)\n                }\n            </div>\n        )\n    }  \n}\n\nexport default MapNotLoaded;","import React, { Component } from 'react';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport * as ZomatoAPI from './ZomatoAPI';\n\nimport LocationDetails from './LocationDetails';\nimport MapNotLoaded from './MapNotLoaded';\n\nclass MapContainer extends Component {\n    state = {\n        map: null,\n        showInfoWindow: false,\n        activeMarker: {},\n        activeMarkerProps: {},\n        showDetails: false,\n        selectedLocation: {},\n        locationData: {}\n    }\n\n    mapReady = (props, map) => {\n        this.setState({map})\n    }\n\n    onClickMarker = (props, marker, e) => {\n        this.setState({ showInfoWindow: true, activeMarker: marker, activeMarkerProps: props}) \n    }\n    onInfoWindowClose = () =>\n    this.setState({ activeMarker: {}, showingInfoWindow: false, activeMarkerProps: {} });\n    \n    onListItemClick = (location) => {\n        this.setState({ selectedLocation : location , showDetails : true})\n\n        let {name} = location; \n        let { lat, lng } = location.position;\n        ZomatoAPI.get(name, lat, lng).then(response => {\n            if(response.error) {\n                return this.setState({ locationData : {error:\"Something went wrong fetching the data...\"} })\n            } else {\n                return this.setState({ locationData : response[0].restaurant })\n                }\n            })\n        }\n    \n    \n\n    render() {\n        let { markers} = this.props\n        let { activeMarker, activeMarkerProps, selectedLocation} = this.state;\n        return(\n            <div>\n            <div style={{ height: 'calc(100%-10vmin', width: '100%'}}>\n            <Map \n                role=\"application\"\n                aria-label=\"map\"\n                onReady={this.mapReady}\n                google={this.props.google}\n                zoom={14}\n                initialCenter={{\n                    lat: 40.7687463,\n                     lng: -73.980931315\n                 }}>\n                 {markers && markers.map((marker) => (\n                     <Marker\n                            role='application'\n                            aria-label='map'\n                            key={marker.name}\n                            position={marker.position}\n                            name={marker.name}\n                            animation={selectedLocation ? (marker.name === selectedLocation.name ? window.google.maps.Animation.BOUNCE :\n                                 window.google.maps.Animation.DROP)\n                                : 1\n                                }\n                            address={marker.address}\n                            url={marker.url}\n                            onClick={this.onClickMarker}/>\n                            \n                 ))}\n                    <InfoWindow \n                            marker={activeMarker}\n                            visible={this.state.showInfoWindow}\n                            onClose={this.state.onInfoWindowClose}>\n                         <div className='info-window'>\n                         <h4>{activeMarkerProps.name}</h4>\n                         <p>{activeMarkerProps.address}</p>\n                         </div>\n                    </InfoWindow>\n                         \n\n\n                </Map>\n            </div>\n            {this.props.toggleMenu && (\n                 <div className=\"list-locations\">\n            \n                 <input \n                     className=\"search-locations\"\n                     type=\"text\"\n                     placeholder=\"Filter Locations...\"\n                     value={this.props.query}\n                     onChange={(e) => {\n                         this.props.onUpdateQuery(e.target.value)\n                         this.setState({ showDetails: false })\n                        }}\n                     \n                     onClick={this.onNewSearch}/>\n             \n             <div className=\"location-list container\">\n                 <ol className=\"location-list\">\n                 {this.props.locations.map((location) => (\n                     <button \n                     key={location.name}                        className=\"location-list-item\" \n                     location={location} \n                     onClick={() => this.onListItemClick(location)}>\n                     {location.name}\n                         </button>\n                     \n             ))}\n         </ol>\n         </div>\n                 {this.state.showDetails && (\n                    <LocationDetails selectedLocation = {this.state.selectedLocation} locationData = {this.state.locationData}/>\n                 )}\n         </div>\n            )}\n           \n\n            </div>\n        )\n    }\n\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyC3ByjZ4k1ujc3LLi1V00_k6QwruFlK9KI', LoadingContainer: MapNotLoaded }) (MapContainer)","import React, { Component } from 'react';\nimport MapContainer from './MapContainer';\nimport locations from './locations';\n\n\nimport { FaBars } from 'react-icons/fa';\nimport './App.css';\nimport escapeRegExp from 'escape-string-regexp';\nimport sortBy from 'sort-by';\n\n\nclass App extends Component {\n  state = {\n    allLocations: {},\n    query : '',\n    toggleMenu: false,\n  }\n\n  componentWillMount() {\n    this.setState({ allLocations : locations})\n  }\n\n  onToggleMenu = () => {\n    this.setState({ toggleMenu: !this.state.toggleMenu})\n  }\n\n  updateQuery = (query) => {\n    this.setState({ query: query.trim()});\n  }\n\n  \n  render() {\n    const { allLocations, query } = this.state\n    let showingLocations \n      if (query) {\n        const match = new RegExp(escapeRegExp(query), 'i')\n        showingLocations = allLocations.filter((location) => \n        match.test(location.name))\n      } else {\n        showingLocations = allLocations\n      }\n      showingLocations.sort(sortBy('name'));\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> Grab a bite near Central Park, NY</h1>\n          <button className=\"toggle-menu\" onClick={this.onToggleMenu}><FaBars/></button>\n        </header>\n        <MapContainer toggleMenu={this.state.toggleMenu}\n                      locations={showingLocations}\n                      markers={showingLocations}\n                      query={this.state.query}\n                      onUpdateQuery={this.updateQuery}\n                      onListItemClick={this.onListItemClick}\n                      showDetails={this.state.showDetails}\n                      selectedLocation={this.state.selectedLocation}\n                      locationData={this.state.locationData}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}